<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ShellShell.Core</name>
    </assembly>
    <members>
        <member name="T:ShellShell.Core.Commands.AddToPathCommand">
            <summary>
            Command to add path of the current groxy exe to the users PATH variable
            </summary>
        </member>
        <member name="M:ShellShell.Core.Commands.AddToPathCommand.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the AddToPathCommand class
            </summary>
            <param name="name">Name of the command</param>
            <param name="description">Description of the command</param>
        </member>
        <member name="T:ShellShell.Core.Constants.BasicCommandNames">
            <summary>
            Collection for built in command names. They suggested to be used with the build in commands to secure consistency
            </summary>
        </member>
        <member name="F:ShellShell.Core.Constants.BasicCommandNames.AddToPathCommandName">
            <summary>
            Name for the AddToPathCommand
            </summary>
        </member>
        <member name="T:ShellShell.Core.Constants.CommandExceptionCode">
            <summary>
            Exception codes thrown from Commands
            </summary>
        </member>
        <member name="F:ShellShell.Core.Constants.CommandExceptionCode.Unknown">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="F:ShellShell.Core.Constants.CommandExceptionCode.UnknownSwitch">
            <summary>
            Switch was entered but not configured
            </summary>
        </member>
        <member name="F:ShellShell.Core.Constants.CommandExceptionCode.CommandAlreadyConfigured">
            <summary>
            The Command you tried to configure was already configured on the ShellShellExecutor
            </summary>
        </member>
        <member name="T:ShellShell.Core.Exceptions.CommandArgumentException">
            <summary>
            Exception thrown from Command actions
            </summary>
        </member>
        <member name="P:ShellShell.Core.Exceptions.CommandArgumentException.ExceptionCode">
            <summary>
            The exception code representing the occured error
            </summary>
        </member>
        <member name="M:ShellShell.Core.Exceptions.CommandArgumentException.#ctor(System.String,ShellShell.Core.Constants.CommandExceptionCode)">
            <summary>
            Creates a new instance of the CommandArgumentException class
            </summary>
            <param name="msg">The error message</param>
            <param name="code">The error code representing the occured error</param>
        </member>
        <member name="T:ShellShell.Core.Models.ShellCommand">
            <summary>
            Class that represents a executable command for the ShellExecutor
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellCommand.Name">
            <summary>
            Gets the name of the command
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellCommand.Description">
            <summary>
            Gets the description of the command
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellCommand.ThrowOnInvalidSwitch">
            <summary>
            Gets or sets if an exception should be thrown if an invalid switch was passed to the command. Default is TRUE
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellCommand.ThrowOnInvalidParameter">
            <summary>
            Gets or sets if an exception should be thrown if an not configured parameter was passed to the command. Default is TRUE
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellCommand.CommandAction">
            <summary>
            The Action that will be invoked if the command should be executed
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellCommand.Parameters">
            <summary>
            Gets the parameters that are configured for this command
            </summary>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.#ctor(System.String,System.Action{ShellShell.Core.ShellShellExecutor},System.String)">
            <summary>
            Creates a new instance of the ShellCommand class
            </summary>
            <param name="name">The name of the command</param>
            <param name="action">The action that should be invoked</param>
            <param name="description">The description of the command. Will be used for the build in help command</param>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the ShellCommand class
            </summary>
            <param name="name">The name of the command</param>
            <param name="description">The description of the command. Will be used for the build in help command</param>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.ConfigureParameter(System.String,System.Boolean,System.String,System.String)">
            <summary>
            Configures a parameter for the command
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="isMandatory">If the parameter should be mandatory</param>
            <param name="defaultValue">The default value if the parameter was not set by the user</param>
            <param name="description">The description of the parameter will be used by the build in help command</param>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.ConfigureSwitch(System.String,System.Boolean)">
            <summary>
            Configures a switch to be available for the command
            </summary>
            <param name="name">The name of the switch</param>
            <param name="defaultValue">The description of the switch. Will be used by the build in help command</param>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.GetSwitchValue(System.String)">
            <summary>
            Gets the value for a specific switch
            </summary>
            <param name="name">The name of the switch to look for</param>
            <returns>The switch value</returns>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.SetSwitch(System.String,System.Boolean)">
            <summary>
            Sets the value for a specific switch
            </summary>
            <param name="name">The name of the switch</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.SetParameter(System.String,System.String)">
            <summary>
            Sets the value for a specific parameter
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.GetParameterAsString(System.String)">
            <summary>
            Gets the value for a specific parameter as a String
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>Parameter value as String</returns>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.GetParameterAsInt(System.String)">
            <summary>
            Gets the value for specific parameter as Int
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>Parameter value as Int</returns>
        </member>
        <member name="M:ShellShell.Core.Models.ShellCommand.GetMandatoryParameters">
            <summary>
            Gets a list of mandatory parameters
            </summary>
            <returns></returns>
        </member>
        <member name="T:ShellShell.Core.Models.ShellParameter">
            <summary>
            Class that describes a parameter that can be passed to a command
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellParameter.Mandatory">
            <summary>
            Gets or sets if the parameter is mandatory
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellParameter.Name">
            <summary>
            Gets or sets the name of the parameter
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellParameter.Value">
            <summary>
            Gets or sets the value of the parameter
            </summary>
        </member>
        <member name="P:ShellShell.Core.Models.ShellParameter.Description">
            <summary>
            Gets or sets a description of the parameter
            </summary>
        </member>
        <member name="T:ShellShell.Core.ShellShellExecutor">
            <summary>
            This is the main class for the ShellShell functionality. Create new instance and configure commands on it. Then run the SetArguments and Execute methods on it
            </summary>
        </member>
        <member name="P:ShellShell.Core.ShellShellExecutor.SwitchChar">
            <summary>
            Gets or sets the character to identify a switch
            </summary>
        </member>
        <member name="P:ShellShell.Core.ShellShellExecutor.ParamChar">
            <summary>
            Gets or sets the character to identify a parameter
            </summary>
        </member>
        <member name="P:ShellShell.Core.ShellShellExecutor.CurrentCommand">
            <summary>
            Gets the current command that will be executed
            </summary>
        </member>
        <member name="P:ShellShell.Core.ShellShellExecutor.UseDefaultCommand">
            <summary>
            Gets or sets if a default command should be used. If true the first registered command will be executed if the user omits the command. Default is false.
            </summary>
        </member>
        <member name="P:ShellShell.Core.ShellShellExecutor.DefaultCommand">
            <summary>
            Gets or sets the default command that will be used if UseDefaultCommand is active and no command is passed to Groxy
            </summary>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.#ctor">
            <summary>
            Creates a new instance of the ShellShellExecutor class
            </summary>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.DisableHelpCommand">
            <summary>
            Disabled the build in help command
            </summary>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.SetArguments(System.String[])">
            <summary>
            Parses the command line to evaluate which command should be executed and fills the parameters/switches with values
            </summary>
            <param name="args">The command line text the user entered</param>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.Execute">
            <summary>
            Executes the CurrentCommand if its set. SetArguments has to be called first.
            </summary>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.ConfigureCommand(ShellShell.Core.Models.ShellCommand)">
            <summary>
            Configures a command to be available for the user
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.ConfigureGlobalParameter(System.String,System.Boolean,System.String)">
            <summary>
            Configures a global parameters. Global parameters will be available for all registered commands
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="isMandatory">If the parameter should be mandatory</param>
            <param name="defaultValue">The default value if the parameter was not set by the user</param>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.GetParameterAsString(System.String)">
            <summary>
            Gets the value for a specific parameter as a String
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>Parameter value as String</returns>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.GetParameterAsInt(System.String)">
            <summary>
            Gets the value for specific parameter as Int
            </summary>
            <param name="name">The name of the parameter</param>
            <returns>Parameter value as Int</returns>
        </member>
        <member name="M:ShellShell.Core.ShellShellExecutor.GetSwitch(System.String)">
            <summary>
            Gets the value for a specific switch
            </summary>
            <param name="name">The name of the switch to look for</param>
            <returns>The switch value</returns>
        </member>
    </members>
</doc>
